// ==UserScript==
// @name         Anti-DPI Advanced v4.0 (No Proxy)
// @namespace    http://tampermonkey.net/
// @version      4.0
// @description  G√¢y nhi·ªÖu DPI b·∫±ng headers gi·∫£, request ng·∫´u nhi√™n, Service Worker, CDN v√† UI c·∫•u h√¨nh n√¢ng cao. C·∫£i ti·∫øn v·ªõi modal c√†i ƒë·∫∑t v√† qu·∫£n l√Ω danh s√°ch tr·∫Øng.
// @author       You
// @match        *://*/*
// @grant        GM_xmlhttpRequest
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_registerMenuCommand
// @run-at       document-end
// ==/UserScript==

(function () {
    'use strict';

    // ========== ‚öôÔ∏è UI C·∫•u h√¨nh ==========
    const configDefaults = {
        requestCount: 5,
        interval: 60000,
        cdnUrl: 'https://cdn.jsdelivr.net/gh/willbelove1/anti-dpi-noise@main/noise-domains.json',
        enableSW: true,
        allowedDomains: ['example.com', 'test.com', 'dummy.net', 'noise.org']
    };

    // ƒê·ªçc c·∫•u h√¨nh t·ª´ b·ªô nh·ªõ
    const config = {
        requestCount: GM_getValue('requestCount', configDefaults.requestCount),
        interval: GM_getValue('interval', configDefaults.interval),
        cdnUrl: GM_getValue('cdnUrl', configDefaults.cdnUrl),
        enableSW: GM_getValue('enableSW', configDefaults.enableSW),
        allowedDomains: GM_getValue('allowedDomains', configDefaults.allowedDomains)
    };

    // Modal UI cho c√†i ƒë·∫∑t
    function createSettingsModal() {
        // T·∫°o container modal
        const modal = document.createElement('div');
        modal.style = `
            position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
            background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.5);
            z-index: 10000; width: 500px; max-height: 80vh; overflow-y: auto;
        `;
        modal.innerHTML = `
            <h2 style="margin-top: 0;">‚öôÔ∏è C·∫•u h√¨nh Anti-DPI</h2>
            <label>S·ªë request g√¢y nhi·ªÖu m·ªói l·∫ßn:</label><br>
            <input id="requestCount" type="number" value="${config.requestCount}" min="1" style="width: 100%; margin-bottom: 10px;"><br>
            <label>Kho·∫£ng c√°ch gi·ªØa c√°c ƒë·ª£t (ms):</label><br>
            <input id="interval" type="number" value="${config.interval}" min="1000" style="width: 100%; margin-bottom: 10px;"><br>
            <label>URL CDN ch·ª©a danh s√°ch domain:</label><br>
            <input id="cdnUrl" type="text" value="${config.cdnUrl}" style="width: 100%; margin-bottom: 10px;"><br>
            <label><input id="enableSW" type="checkbox" ${config.enableSW ? 'checked' : ''}> K√≠ch ho·∫°t Service Worker</label><br>
            <h3>Danh s√°ch tr·∫Øng (Allowed Domains)</h3>
            <div id="allowedDomainsList" style="margin-bottom: 10px;"></div>
            <input id="newDomain" type="text" placeholder="Th√™m t√™n mi·ªÅn m·ªõi (e.g., reddit.com)" style="width: 70%; margin-right: 5px;">
            <button id="addDomain">Th√™m</button><br>
            <button id="saveSettings" style="margin-top: 10px; padding: 8px 16px;">L∆∞u</button>
            <button id="cancelSettings" style="margin-top: 10px; padding: 8px 16px; margin-left: 10px;">H·ªßy</button>
        `;
        document.body.appendChild(modal);

        // T·∫°o overlay
        const overlay = document.createElement('div');
        overlay.style = `
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0,0,0,0.5); z-index: 9999;
        `;
        document.body.appendChild(overlay);

        // Hi·ªÉn th·ªã danh s√°ch tr·∫Øng
        function updateDomainsList() {
            const list = document.getElementById('allowedDomainsList');
            list.innerHTML = '';
            config.allowedDomains.forEach((domain, index) => {
                const div = document.createElement('div');
                div.innerHTML = `
                    <span>${domain}</span>
                    <button onclick="this.parentElement.remove(); config.allowedDomains.splice(${index}, 1);">X√≥a</button>
                `;
                list.appendChild(div);
            });
        }
        updateDomainsList();

        // X·ª≠ l√Ω s·ª± ki·ªán th√™m domain
        document.getElementById('addDomain').addEventListener('click', () => {
            const newDomain = document.getElementById('newDomain').value.trim();
            if (newDomain && !config.allowedDomains.includes(newDomain)) {
                config.allowedDomains.push(newDomain);
                document.getElementById('newDomain').value = '';
                updateDomainsList();
            }
        });

        // X·ª≠ l√Ω s·ª± ki·ªán l∆∞u
        document.getElementById('saveSettings').addEventListener('click', () => {
            const requestCount = parseInt(document.getElementById('requestCount').value);
            const interval = parseInt(document.getElementById('interval').value);
            const cdnUrl = document.getElementById('cdnUrl').value.trim();
            const enableSW = document.getElementById('enableSW').checked;

            // Ki·ªÉm tra ƒë·∫ßu v√†o
            if (isNaN(requestCount) || requestCount < 1) {
                alert('S·ªë request ph·∫£i l√† s·ªë d∆∞∆°ng!');
                return;
            }
            if (isNaN(interval) || interval < 1000) {
                alert('Kho·∫£ng c√°ch ph·∫£i l·ªõn h∆°n 1000ms!');
                return;
            }
            if (!cdnUrl.match(/^https?:\/\/.+/)) {
                alert('URL CDN kh√¥ng h·ª£p l·ªá!');
                return;
            }

            // L∆∞u c·∫•u h√¨nh
            config.requestCount = requestCount;
            config.interval = interval;
            config.cdnUrl = cdnUrl;
            config.enableSW = enableSW;
            GM_setValue('requestCount', requestCount);
            GM_setValue('interval', interval);
            GM_setValue('cdnUrl', cdnUrl);
            GM_setValue('enableSW', enableSW);
            GM_setValue('allowedDomains', config.allowedDomains);

            alert('‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh. Reload trang ƒë·ªÉ √°p d·ª•ng.');
            document.body.removeChild(modal);
            document.body.removeChild(overlay);
        });

        // X·ª≠ l√Ω s·ª± ki·ªán h·ªßy
        document.getElementById('cancelSettings').addEventListener('click', () => {
            document.body.removeChild(modal);
            document.body.removeChild(overlay);
        });
    }

    // Menu ch·ªânh c·∫•u h√¨nh
    GM_registerMenuCommand("‚öôÔ∏è C·∫•u h√¨nh Anti-DPI", createSettingsModal);

    // ========== üì¶ C·∫•u tr√∫c d·ªØ li·ªáu ==========
    const userAgents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15',
        'Mozilla/5.0 (X11; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1'
    ];

    const customHeaders = {
        'Accept': [
            'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'application/json, text/plain, */*'
        ],
        'Accept-Language': [
            'en-US,en;q=0.5',
            'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7'
        ],
        'Referer': [
            'https://www.google.com',
            'https://www.bing.com',
            ''
        ],
        'Origin': [
            'https://example.com',
            'https://test.com',
            ''
        ],
        'Cache-Control': [
            'no-cache',
            'max-age=0'
        ],
        'Connection': [
            'keep-alive',
            'close'
        ]
    };

    const methods = ['GET', 'POST', 'HEAD', 'OPTIONS'];
    let noiseDomains = [
        'https://reddit.com',
        'https://wikipedia.org',
        'https://news.ycombinator.com',
        'https://archive.org'
    ]; // Fallback domains

    // ========== üåê T·∫£i danh s√°ch domain t·ª´ CDN ==========
    function fetchNoiseDomainsFromCDN() {
        GM_xmlhttpRequest({
            method: 'GET',
            url: config.cdnUrl + '?_=' + Date.now(),
            onload: res => {
                try {
                    const data = JSON.parse(res.responseText);
                    noiseDomains = data.domains || noiseDomains;
                    console.log('[Anti-DPI] Noise domains loaded:', noiseDomains);
                } catch (e) {
                    console.warn('‚ùå L·ªói ph√¢n t√≠ch JSON noiseDomains, s·ª≠ d·ª•ng fallback:', e);
                }
            },
            onerror: err => {
                console.warn('‚ùå Kh√¥ng th·ªÉ t·∫£i CDN, s·ª≠ d·ª•ng fallback domains:', err);
            }
        });
    }

    // ========== üß† Utilities ==========
    function getRandomItem(arr) {
        return arr[Math.floor(Math.random() * arr.length)];
    }

    function generateHeaders() {
        const domain = getRandomItem(noiseDomains).replace('https://', '');
        return {
            'User-Agent': getRandomItem(userAgents),
            'Accept': getRandomItem(customHeaders.Accept),
            'Accept-Language': getRandomItem(customHeaders['Accept-Language']),
            'Referer': getRandomItem(customHeaders.Referer),
            'Origin': getRandomItem(customHeaders.Origin),
            'Cache-Control': getRandomItem(customHeaders['Cache-Control']),
            'Connection': getRandomItem(customHeaders.Connection),
            'X-Custom-Header': 'Noise-' + Math.random().toString(36).substring(2),
            'Host ': domain // Th√™m kho·∫£ng tr·∫Øng ƒë·ªÉ m√¥ ph·ªèng GoodbyeDPI
        };
    }

    function sendFakeRequest(method, url) {
        GM_xmlhttpRequest({
            method,
            url: config.enableSW ? redirectViaSW(url) : url,
            headers: generateHeaders(),
            data: method === 'POST' ? JSON.stringify({ junk: Math.random() }) : null,
            onload: res => console.log(`[${method}] ${url} =>`, res.status),
            onerror: err => console.error(`[${method}] Error:`, err)
        });
    }

    function redirectViaSW(url) {
        return url + (url.includes('?') ? '&' : '?') + 'antiDPI=' + Math.random().toString(36).substring(7);
    }

    // ========== üïµÔ∏è‚Äç‚ôÇÔ∏è Ki·ªÉm tra DPI ==========
    function testDPI(url = 'https://reddit.com') {
        GM_xmlhttpRequest({
            method: 'GET',
            url,
            headers: generateHeaders(),
            onload: res => {
                if (res.status === 403 || res.status === 503) {
                    console.warn('[Anti-DPI] C√≥ th·ªÉ b·ªã DPI ch·∫∑n:', url);
                } else {
                    console.log('[Anti-DPI] Kh√¥ng ph√°t hi·ªán DPI:', url);
                }
            },
            onerror: err => console.error('[Anti-DPI] L·ªói ki·ªÉm tra DPI:', err)
        });
    }

    // ========== üñºÔ∏è G√¢y nhi·ªÖu DOM ==========
    function insertHiddenIframes() {
        if (!noiseDomains.length) return;
        const maxElements = 3; // Gi·ªõi h·∫°n s·ªë iframe/img
        noiseDomains.slice(0, maxElements).forEach(domain => {
            const iframe = document.createElement('iframe');
            iframe.src = redirectViaSW(domain);
            iframe.style = 'display:none;width:0;height:0;';
            document.body.appendChild(iframe);

            const img = document.createElement('img');
            img.src = redirectViaSW(domain + '?img=' + Math.random());
            img.style = 'width:1px;height:1px;position:absolute;left:-9999px;';
            document.body.appendChild(iframe);
        });
    }

    // ========== üì° G·ª≠i y√™u c·∫ßu gi·∫£ ==========
    function scheduleNoise() {
        const maxRequestsPerSecond = 1; // Gi·ªõi h·∫°n t·∫ßn su·∫•t
        let sentRequests = 0;
        for (let i = 0; i < config.requestCount && sentRequests < maxRequestsPerSecond; i++) {
            const method = getRandomItem(methods);
            const url = getRandomItem(noiseDomains);
            if (url) {
                sendFakeRequest(method, url);
                sentRequests++;
            }
        }
    }

    // ========== üöÄ Main ==========
    window.addEventListener('load', () => {
        // Ki·ªÉm tra danh s√°ch tr·∫Øng
        if (!config.allowedDomains.some(domain => location.hostname.includes(domain))) {
            console.log('[Anti-DPI] Trang kh√¥ng n·∫±m trong danh s√°ch cho ph√©p:', location.hostname);
            return;
        }

        // Ki·ªÉm tra HTTPS
        if (location.protocol !== 'https:') {
            console.warn('‚ö†Ô∏è HTTPS kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng.');
            return;
        }

        // Ki·ªÉm tra Service Worker
        if (config.enableSW && !('serviceWorker' in navigator)) {
            console.warn('[Anti-DPI] Service Worker kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.');
            config.enableSW = false;
            GM_setValue('enableSW', false);
        }

        // ƒêƒÉng k√Ω Service Worker
        if (config.enableSW && 'serviceWorker' in navigator) {
            navigator.serviceWorker.register('https://cdn.jsdelivr.net/gh/willbelove1/anti-dpi-noise@main/anti-dpi-sw.js').then(reg => {
                console.log('[Anti-DPI] Service Worker registered:', reg);
            }).catch(err => {
                console.warn('[Anti-DPI] Service Worker registration failed:', err);
                config.enableSW = false;
                GM_setValue('enableSW', false);
            });
        }

        // Kh·ªüi ƒë·ªông
        fetchNoiseDomainsFromCDN();
        setTimeout(() => {
            testDPI();
            insertHiddenIframes();
            scheduleNoise();
            setInterval(scheduleNoise, config.interval);
        }, 3000);
    });
})();